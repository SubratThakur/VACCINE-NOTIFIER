{"version":3,"sources":["components/Header.js","components/UnubscribeUser.js","components/SubscribeUser.js","services/UserService.js","services/CoWinService.js","App.js","serviceWorker.js","components/AppError.js","index.js"],"names":["Header","numberOfUsers","getAllUsers","className","style","width","padding","backgroundColor","color","textAlign","UnsubscribeUser","states","districts","onChageDropdown","unsubscribeUser","React","useState","isInvalidEmail","setInvalidEmail","isInvalidPhone","setInvalidPhone","email","phone","state","district","user","setUser","isErrorPresent","selectedState","value","selectedDistrict","onChangeForm","e","target","name","checkValidEmail","checkValidPhone","length","test","validateDataAndUnsubscribeUser","htmlFor","type","onChange","id","aria-describedby","placeholder","pattern","selectedOption","console","log","options","class","onClick","SubscribeUser","createUser","filter","setFilter","isInvalidState","setInvalidState","isInvalidDistrict","setInvalidDistrict","validateDistrict","label","onUpdateFormField","createSubscription","ToggleButtonGroup","event","newFilter","aria-label","ToggleButton","a","fetch","response","json","data","method","headers","body","JSON","stringify","stateId","App","DEFAULT_USER","setUsers","setStates","setDistrict","setNumberOfUsers","fetchListOfStates","then","stateList","map","key","state_id","state_name","districtOptions","fetchListOfDistrictForState","resp","districtList","district_id","district_name","updateStateAndDistrict","useEffect","users","Tabs","defaultActiveKey","eventKey","title","firstName","lastName","DEFAULT_FILTER","age","vaccine","userFilter","forEach","isNaN","includes","parseInt","push","createUserSubscription","Boolean","window","location","hostname","match","ErrorComponent","AppError","hasError","componentDidCatch","error","info","setState","this","children","props","Component","getDerivedStateFromError","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6bd074b1.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = ({numberOfUsers, getAllUsers}) => {\n\n    const headerStyle = {\n\n        width: '100%',\n        padding: '2%',\n        backgroundColor: \"#1c424a\",\n        color: 'white',\n        textAlign: 'left'\n    }\n\n    return(\n        <div className=\"container mrgnbtm\" style={headerStyle}>\n            <div className=\"row\">\n              <div className=\"col-md-8\">\n                <div>\n                    <h1>Vaccine Notifier</h1>\n                    <p> Subscribe notification for daily updated vaccine slots !</p>\n                </div>\n                </div>\n                <div className=\"col-md-4\">\n                <h4 style={{color: 'white'}}>Total Subscribed Users</h4>\n                    <span className=\"number\">\n                    {numberOfUsers}\n                    </span>\n                </div>\n            </div>\n        </div>\n\n    )\n}","import React from 'react'\nimport Select from 'react-select';\n\n\nconst UnsubscribeUser = ({states, districts,onChageDropdown, unsubscribeUser }) => {\n\n    const [isInvalidEmail, setInvalidEmail] = React.useState(false);\n    const [isInvalidPhone, setInvalidPhone] = React.useState(false);\n    const [user, setUser] = React.useState({email:\"\", phone: \"\", state: \"\", district: \"\"})\n    let isErrorPresent = false;\n    let selectedState = user.state?.value || {};\n    let selectedDistrict = user.district?.value || {};\n    const handleStateChange = (selectedOption) => {\n          selectedState = selectedOption.value;\n          user.state = selectedOption;\n          setUser(user);\n          selectedDistrict = '';\n          onChageDropdown(selectedOption, 'state');\n          console.log(`Option selected:`, selectedOption)\n    };\n    const handleDistrictChange = (selectedOption) => {\n        selectedDistrict = selectedOption.value;\n        user.district = selectedOption;\n        setUser(user);\n        console.log(`Option selected:`, selectedOption)\n  };\n\n    const onChangeForm=(e)=>{\n        if (e.target.name === 'email') {\n            user.email = e.target.value;\n            setUser(user);\n            if(isInvalidEmail){\n              checkValidEmail()\n            }\n        } else if (e.target.name === 'phone') {\n            user.phone = e.target.value;\n            setUser(user);\n            if(isInvalidPhone){\n              checkValidPhone()\n            }\n      }\n    }\n\n    const validateUserData=()=>{\n        checkValidEmail();\n        checkValidPhone();\n        return isErrorPresent;\n    }\n\n    const checkValidEmail=()=> {\n        if(!user.email || user.email?.length===0 || !/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(user.email)){\n            setInvalidEmail(true);\n            isErrorPresent = isErrorPresent || true;\n        } else {\n            setInvalidEmail(false)\n        }\n    }\n\n    const checkValidPhone=()=> {\n        if(!user.phone || user.phone.length!==10 || !/^[6-9]\\d{9}$/.test(user.phone)){\n            setInvalidPhone(true);\n            isErrorPresent = isErrorPresent || true;\n        } else {\n            setInvalidPhone(false)\n        }\n    }\n\n    const validateDataAndUnsubscribeUser=(e)=>{\n        isErrorPresent = false;\n        if(!validateUserData()){\n            unsubscribeUser(user); \n        }\n\n    }\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-7 mrgnbtm\">\n                <h2>Unsubscribe User!</h2>\n                <form>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputEmail1\"><b>Email</b> (Mandatory)</label>\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className={isInvalidEmail? 'form-control invalid': 'form-control'} name=\"email\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Email\" />\n                            <div className={isInvalidEmail? 'error': 'hidden'}>Please enter valid email Id!</div>\n                        </div>\n\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputPhone1\"><b>Phone</b> (Mandatory)</label>\n                            <input type=\"text\" onChange={(e) => onChangeForm(e)} className={isInvalidPhone? 'form-control invalid': 'form-control'} name=\"phone\" id=\"phone\" aria-describedby=\"phoneHelp\" placeholder=\"Phone\" pattern=\"[0-9]+\"/>\n                            <div className={isInvalidPhone? 'error': 'hidden'}>Please enter valid phone number!</div>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputState\"><b>State</b> (Mandatory)</label>\n                            <Select\n                                value={selectedState.value}\n                                onChange={handleStateChange}\n                                options={states}\n                            />\n                            <div></div>\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputDistrict\"><b>District </b>(Mandatory)</label>\n                                <Select\n                                    value={selectedDistrict.value}\n                                    onChange={handleDistrictChange}\n                                    options={districts}\n                                />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                    <div className=\"form-group col-md-12\">\n                    <div class=\"info\">\n                        <p><strong>Info!</strong> If you have setup notification for multiple places and you just wanted to unsubscribe notification for single state/district then choose that particular state/district!</p>\n                    </div>\n                    </div>\n                    </div>\n                    <button type=\"button\" onClick= {(e) => validateDataAndUnsubscribeUser()} className=\"btn btn-danger\">Unsubscribe</button>\n                </form>\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default UnsubscribeUser","import React from 'react'\nimport { ToggleButtonGroup, ToggleButton } from '@material-ui/lab';\nimport Select from 'react-select';\n\nconst SubscribeUser = ({user, onChangeForm, createUser, states, district, onChageDropdown}) => {\n    const [filter, setFilter] = React.useState(() => ['18', 'covishield', 'covaxin', 'free', 'paid']);\n    const [isInvalidState, setInvalidState] = React.useState(false)\n    const [isInvalidDistrict, setInvalidDistrict] = React.useState(false);\n    const [isInvalidEmail, setInvalidEmail] = React.useState(false);\n    const [isInvalidPhone, setInvalidPhone] = React.useState(false);\n\n    let isErrorPresent = false;\n    const validateUserData = ()=>{\n        if(!user.state){\n            setInvalidState(true);\n            isErrorPresent = isErrorPresent || true;\n        } else {\n            setInvalidState(false);\n        }\n        if(!validateDistrict()){\n            setInvalidDistrict(true);\n            isErrorPresent = isErrorPresent || true;\n        } else {\n            setInvalidDistrict(false);\n        }\n        checkValidEmail();\n        checkValidPhone();\n    }\n\n    const validateDistrict=()=> {\n        if(!user.district || !user.district.value){\n            return false\n        }\n        const filterList = district.filter((district)=>{\n            return district.label === user.district.label;\n        })\n        return filterList.length>0;\n    }\n\n    const checkValidEmail=()=> {\n        if(!user.email || user.email?.length===0 || !/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(user.email)){\n            setInvalidEmail(true);\n            isErrorPresent = isErrorPresent || true;\n        } else {\n            setInvalidEmail(false)\n        }\n    }\n\n    const checkValidPhone=()=> {\n        if(!user.phone || user.phone.length!==10 || !/^[6-9]\\d{9}$/.test(user.phone)){\n            setInvalidPhone(true);\n            isErrorPresent = isErrorPresent || true;\n        } else {\n            setInvalidPhone(false)\n        }\n    }\n\n    const onUpdateFormField = (e) => {\n        if (e.target.name === 'email') {\n            if(isInvalidEmail){\n              checkValidEmail()\n            }\n        } else if (e.target.name === 'phone') {\n            if(isInvalidPhone){\n              checkValidPhone()\n            }\n      }\n      onChangeForm(e)\n    }\n\n    const createSubscription =()=> {\n        isErrorPresent = false;\n        validateUserData();\n        if(!isErrorPresent){\n            createUser(filter)\n        }\n    }\n\n    const handleFormat = (event, newFilter) => {\n        setFilter(newFilter);\n    };\n    let selectedState = user.state.value || {};\n    let selectedDistrict = user.district.value || {};\n    const handleStateChange = (selectedOption) => {\n          setInvalidState(false);\n          selectedState = selectedOption.value;\n          selectedDistrict = '';\n          onChageDropdown(selectedOption, 'state');\n          console.log(`Option selected:`, selectedOption)\n    };\n    const handleDistrictChange = (selectedOption) => {\n        selectedDistrict = selectedOption.value;\n        setInvalidDistrict(false);\n        onChageDropdown(selectedOption, 'district');\n        console.log(`Option selected:`, selectedOption)\n  };\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-7 mrgnbtm\">\n                <h2>Subscribe vaccine slot Notification!</h2>\n                <form>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputEmail1\">First Name</label>\n                            <input type=\"text\" onChange={(e) => onUpdateFormField(e)}  className=\"form-control\" name=\"firstname\" id=\"firstname\" aria-describedby=\"emailHelp\" placeholder=\"First Name\" />\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputPassword1\">Last Name</label>\n                            <input type=\"text\" onChange={(e) => onUpdateFormField(e)} className=\"form-control\" name=\"lastname\" id=\"lastname\" placeholder=\"Last Name\" />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputState\"><b>State</b> (Mandatory)</label>\n                            <div className={isInvalidState? 'invalid': ''}>\n                            <Select\n                                value={selectedState.value}\n                                onChange={handleStateChange}\n                                options={states}\n                            />\n                            <div className={isInvalidState? 'error': 'hidden'}>Please select valid state!</div>\n                            </div>\n                            <div></div>\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputDistrict\"><b>District </b>(Mandatory)</label>\n                            <div className={isInvalidDistrict? 'invalid': ''}>\n                                <Select\n                                    value={selectedDistrict.value}\n                                    onChange={handleDistrictChange}\n                                    options={district}\n                                />\n                                <div className={isInvalidDistrict? 'error': 'hidden'}>Please select valid district!</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"row filter\">\n                    <ToggleButtonGroup value={filter} onChange={handleFormat} aria-label=\"text formatting\">\n                        <ToggleButton value=\"18\" aria-label=\"18 plus\">\n                            <b>Age 18+</b>\n                        </ToggleButton>\n                        <ToggleButton value=\"45\" aria-label=\"45 plus\">\n                            <b>Age 45+</b>\n                        </ToggleButton>\n\n                        <ToggleButton value=\"covishield\" aria-label=\"45 plus\">\n                            <b>Covishield</b>\n                        </ToggleButton>\n\n                        <ToggleButton value=\"covaxin\" aria-label=\"45 plus\">\n                            <b>Covaxin</b>\n                        </ToggleButton>\n\n                        <ToggleButton value=\"free\" aria-label=\"45 plus\">\n                            <b>Free</b>\n                        </ToggleButton>\n\n                        <ToggleButton value=\"paid\" aria-label=\"45 plus\">\n                            <b>Paid</b>\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n                    <span className=\"filter-span\">\n                        <span className=\"selected-filter\"></span> Selected\n                        <br></br>\n                        <span className=\"unselected-filter\"></span> Not Selected\n                    </span>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputEmail1\"><b>Email</b> (Mandatory)</label>\n                            <input type=\"text\" onChange={(e) => onUpdateFormField(e)} className={isInvalidEmail? 'form-control invalid': 'form-control'} name=\"email\" id=\"email\" aria-describedby=\"emailHelp\" placeholder=\"Email\" />\n                            <div className={isInvalidEmail? 'error': 'hidden'}>Please enter valid email Id!</div>\n                        </div>\n\n                        <div className=\"form-group col-md-6\">\n                            <label htmlFor=\"exampleInputPhone1\"><b>Phone</b> (Mandatory)</label>\n                            <input type=\"text\" onChange={(e) => onUpdateFormField(e)} className={isInvalidPhone? 'form-control invalid': 'form-control'} name=\"phone\" id=\"phone\" aria-describedby=\"phoneHelp\" placeholder=\"Phone\" pattern=\"[0-9]+\"/>\n                            <div className={isInvalidPhone? 'error': 'hidden'}>Please enter valid phone number!</div>\n                        </div>\n                    </div>\n                    <button type=\"button\" onClick= {(e) => createSubscription()} className=\"btn btn-danger\">Subscribe</button>\n                </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SubscribeUser","\nexport async function getAllUsers() {\n\n    try{\n        const response = await fetch('/api/users');\n        return await response.json();\n    }catch(error) {\n        return [];\n    }\n    \n}\n\nexport async function createUserSubscription(data) {\n    const response = await fetch(`/api/user`, {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({user: data})\n      })\n    return await response.json();\n}\n\nexport async function unsubscribeUser(data){\n    const response = await fetch(`/api/user`, {\n        method: 'DELETE',\n        headers: {'Content-Type': 'application/json'},\n        body: JSON.stringify({user: data})\n      })\n    return await response.json();\n}","import fetch from 'node-fetch';\n\nexport async function fetchListOfStates() {\n    const response = await fetch(`https://cdn-api.co-vin.in/api/v2/admin/location/states`, {\n        method: 'GET',\n        headers: {'Content-Type': 'application/json'}\n      })\n    return await response.json();\n}\n\nexport async function fetchListOfDistrictForState(stateId) {\n    const response = await fetch(`https://cdn-api.co-vin.in/api/v2/admin/location/districts/${stateId}`, {\n        method: 'GET',\n        headers: {'Content-Type': 'application/json'}\n      })\n    return await response.json();\n}","import React, { useState, useEffect } from 'react';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tabs';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Header } from './components/Header'\nimport { Users } from './components/Users'\nimport UnsubscribeUser from './components/UnubscribeUser'\nimport SubscribeUser from './components/SubscribeUser'\nimport { getAllUsers, createUserSubscription, unsubscribeUser } from './services/UserService'\nimport { fetchListOfStates, fetchListOfDistrictForState } from './services/CoWinService'\n\n\nfunction App() {\n  const DEFAULT_USER = {email:'',phone:'',state:'',district:''};\n  const [user, setUser] = useState(DEFAULT_USER)\n  const [users, setUsers] = useState([])\n  const [states, setStates] = useState([])\n  const [district, setDistrict] = useState([])\n  const [numberOfUsers, setNumberOfUsers] = useState(0)\n  \n\n  const subscribe = (filter) => {\n    const DEFAULT_FILTER = { age:[18, 45], vaccine:['covishield', 'covaxin'], type:['free', 'paid']};\n    const userFilter = {age:[], vaccine:[], type:[]};\n    if(filter.length===0){\n      userFilter = DEFAULT_FILTER;\n    } else {\n      filter.forEach((data)=>{\n        if(!isNaN(data) && DEFAULT_FILTER.age.includes(parseInt(data) )){\n          userFilter.age.push(data);\n        } else if(DEFAULT_FILTER.vaccine.includes(data)) {\n          userFilter.vaccine.push(data);\n        } else if(DEFAULT_FILTER.type.includes(data)) {\n          userFilter.type.push(data);\n        } \n      })\n    }\n    user.filter = userFilter;\n    createUserSubscription(user)\n        .then(response => {\n          console.log(response);\n          setNumberOfUsers(numberOfUsers+1)\n      });\n  }\n\n  const unsubscribe = (user) => {\n    unsubscribeUser(user).then(response => {\n      console.log(response);\n      setUser(DEFAULT_USER);\n      setNumberOfUsers(numberOfUsers-response);\n    });\n  }\n\n  const stateOptions = ()=> {\n    if(states.length===0){\n      fetchListOfStates().then(response=>{\n        const stateList = response.states.map((state) =>  { return { key: state.state_id,\n          label: state.state_name,\n          value: state.state_id,}\n        });\n        console.log(stateList);\n        setStates(stateList);\n      })\n    }\n}\n\nstateOptions();\n\nconst districtOptions = (stateId)=> {\n    fetchListOfDistrictForState(stateId)\n    .then(resp => {\n      const districtList = resp.districts.map((district) => { return {\n        key: district.district_id,\n        label: district.district_name,\n        value: district.district_id,\n      }})\n      console.log(districtList);\n      setDistrict(districtList);\n    });\n}\n  const updateStateAndDistrict = (data, type)=>{\n    if(type === 'state'){\n      if(user.state?.value !== data.value){\n        user.state = data;\n        districtOptions(data.value);\n      }\n    } else {\n      user.district = data;\n    }\n  }\n\n  const fetchAllUsers = () => {\n    getAllUsers()\n      .then(users => {\n        console.log(users)\n        setUsers(users);\n        setNumberOfUsers(users.length)\n      });\n  }\n\n  useEffect(() => {\n    getAllUsers()\n      .then(users => {\n        console.log(users)\n        setUsers(users);\n        setNumberOfUsers(users.length)\n      });\n  }, [])\n\n  const onChangeForm = (e) => {\n      if (e.target.name === 'firstname') {\n          user.firstName = e.target.value;\n      } else if (e.target.name === 'lastname') {\n          user.lastName = e.target.value;\n      } else if (e.target.name === 'email') {\n          user.email = e.target.value;\n      } else if (e.target.name === 'phone') {\n          user.phone = e.target.value;\n    }\n      setUser(user)\n  }\n    \n    return (\n        <div className=\"App\">\n          <Header\n          numberOfUsers={numberOfUsers}\n          getAllUsers={fetchAllUsers}\n          ></Header>\n          <div className=\"container mrgnbtm\">\n            <div className=\"row\">\n              <div className=\"col-md-8\">\n\n              <Tabs defaultActiveKey=\"subscribe\" id=\"main-sub-unsub-container\">\n                <Tab eventKey=\"subscribe\" title=\"Subscribe Notification\">\n                  <div className=\"childContainer\">\n                    <SubscribeUser \n                        user={user}\n                        onChangeForm={onChangeForm}\n                        createUser={subscribe}\n                        states={states}\n                        district={district}\n                        onChageDropdown = {updateStateAndDistrict}\n                        >\n                      </SubscribeUser>\n                    </div>\n                </Tab>\n                <Tab eventKey=\"unsubscribe\" title=\"Unsubscribe Notification\">\n                  <div className=\"childContainer\">\n                    <p>If you don't want get notified for available slots , you can simple stop your notifications!</p> \n                    <UnsubscribeUser \n                        states={states}\n                        districts={district}\n                        onChageDropdown = {updateStateAndDistrict}\n                        unsubscribeUser={unsubscribe}></UnsubscribeUser>\n                  </div>\n                </Tab>\n              </Tabs>\n              </div>\n            </div>\n          </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst ErrorComponent = () => {\n  return <h1>Something went wrong</h1>;\n};\n\nexport class AppError extends React.Component {\n  \n  state = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError = error => {\n    return { hasError: true };\n  };\n\n  componentDidCatch = (error, info) => {\n    this.setState({ error, info });\n  };\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    return hasError ? <ErrorComponent /> : children;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppError } from './components/AppError';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppError>\n      <App />\n    </AppError>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}